#!/bin/sh

# # Enable colors and change prompt:
# autoload -U colors && colors
#
# git_branch_test_color() {
#   local ref=$(git symbolic-ref --short HEAD 2> /dev/null)
#   if [ -n "${ref}" ]; then
#     if [ -n "$(git status --porcelain)" ]; then
#       local gitstatuscolor='%F{red}'
#     else
#       local gitstatuscolor='%F{green}'
#     fi
#     echo "${gitstatuscolor} \ue0a0(${ref})"
#   else
#     echo ""
#   fi
# }
# setopt PROMPT_SUBST
# # PROMPT='%9c$(git_branch_test_color)%F{none} %# '
#
# PS1='%F{7}[%f%F{7}%n%f%F{8}@%f%F{7}%M%f%F{7}]%f$(git_branch_test_color) %B%F{blue}%~%f%b'$'\n'"%F{7}>%f"

##### END

# Enable vcs and colors
autoload -Uz vcs_info
autoload -U colors && colors

# Enable only git 
zstyle ':vcs_info:*' enable git 

# setup a hook that runs before every ptompt. 
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst

# add a function to check for untracked files in the directory.
# from https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked
# 
+vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | grep '??' &> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[staged]+='!' # signify new files with a bang
    fi
}

zstyle ':vcs_info:*' check-for-changes true
# zstyle ':vcs_info:git:*' formats " %r/%S %b %m%u%c "
zstyle ':vcs_info:git:*' formats " %{$fg[blue]%}(%{$fg[red]%}%m%u%c%{$fg[yellow]%}îœ¥%{$fg[magenta]%} %b%{$fg[blue]%})"

PROMPT='%F{7}[%f%F{7}%n%f%F{8}@%f%F{7}%M%f%F{7}]%f$vcs_info_msg_0_ %B%F{blue}%~%f%b'$'\n'"%F{7}>%f"
